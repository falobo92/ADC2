// ===== UTILIDADES DE PRUEBA =====
export class TestUtils {
    static testAllFunctionalities() {
        console.log('üß™ Iniciando pruebas de funcionalidades...');
        const tests = [
            this.testFileUpload(),
            this.testFilters(),
            this.testCharts(),
            this.testModals(),
            this.testResponsiveDesign()
        ];
        const results = tests.filter(Boolean);
        console.log(`‚úÖ ${results.length}/${tests.length} pruebas pasaron`);
        return results.length === tests.length;
    }
    
    static testFileUpload() {
        try {
            const fileInput = document.getElementById('fileInput');
            const fileDisplay = document.getElementById('fileNameDisplay');
            
            if (!fileInput || !fileDisplay) {
                console.error('‚ùå Elementos de carga de archivos no encontrados');
                return false;
            }
            
            console.log('‚úÖ Elementos de carga de archivos encontrados');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de carga de archivos:', error);
            return false;
        }
    }
    
    static testFilters() {
        try {
            const filterElements = [
                'weekSelect', 'daySelect', 'tematicaSelect', 
                'itemSelect', 'personSelect', 'stateSelect', 'subcontractSelect'
            ];
            
            const missing = filterElements.filter(id => !document.getElementById(id));
            
            if (missing.length > 0) {
                console.error('‚ùå Elementos de filtro faltantes:', missing);
                return false;
            }
            
            console.log('‚úÖ Todos los elementos de filtro encontrados');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de filtros:', error);
            return false;
        }
    }
    
    static testCharts() {
        try {
            const chartElements = [
                'chartTotal', 'chartADC', 'chartPAC'
            ];
            
            const missing = chartElements.filter(id => !document.getElementById(id));
            
            if (missing.length > 0) {
                console.error('‚ùå Elementos de gr√°ficos faltantes:', missing);
                return false;
            }
            
            console.log('‚úÖ Todos los elementos de gr√°ficos encontrados');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de gr√°ficos:', error);
            return false;
        }
    }
    
    static testModals() {
        try {
            const modal = document.getElementById('questionsModal');
            const modalTitle = document.getElementById('modalTitle');
            const questionsList = document.getElementById('questionsList');
            
            if (!modal || !modalTitle || !questionsList) {
                console.error('‚ùå Elementos del modal faltantes');
                return false;
            }
            
            console.log('‚úÖ Elementos del modal encontrados');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de modales:', error);
            return false;
        }
    }
    
    static testResponsiveDesign() {
        try {
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.querySelector('.main-content');
            const menuToggle = document.querySelector('.menu-toggle');
            
            if (!sidebar || !mainContent || !menuToggle) {
                console.error('‚ùå Elementos de dise√±o responsivo faltantes');
                return false;
            }
            
            console.log('‚úÖ Elementos de dise√±o responsivo encontrados');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de dise√±o responsivo:', error);
            return false;
        }
    }
    
    static testDataFlow() {
        console.log('üîÑ Probando flujo de datos...');
        
        // Simular datos de prueba
        const testData = [
            {
                ID: 'TEST001',
                ID_Corregido: 'TEST001',
                Documento: 'ADC',
                Estado: 'En elaboraci√≥n',
                Elaborador: 'Test User',
                Revisor: 'Test Reviewer',
                Coordinador: 'Test Coordinator',
                FechaReporte: '2024-01-01',
                Semana: '23',
                Tematica: 'Test Tem√°tica',
                Item: 'Test Item'
            }
        ];
        
        try {
            // Verificar que el estado puede manejar los datos
            if (window.app && window.app.state) {
                window.app.state.allRawData = testData;
                console.log('‚úÖ Estado de la aplicaci√≥n puede manejar datos');
                return true;
            } else {
                console.error('‚ùå Estado de la aplicaci√≥n no disponible');
                return false;
            }
        } catch (error) {
            console.error('‚ùå Error en prueba de flujo de datos:', error);
            return false;
        }
    }
    
    static testEventHandlers() {
        console.log('üéØ Probando manejadores de eventos...');
        
        try {
            // Verificar que los eventos globales est√°n disponibles
            const globalFunctions = [
                'clearAllFilters',
                'exportToExcel', 
                'clearAllData',
                'toggleSidebar',
                'switchMainTab',
                'closeModal'
            ];
            
            const missing = globalFunctions.filter(func => !window[func]);
            
            if (missing.length > 0) {
                console.error('‚ùå Funciones globales faltantes:', missing);
                return false;
            }
            
            console.log('‚úÖ Todas las funciones globales disponibles');
            return true;
        } catch (error) {
            console.error('‚ùå Error en prueba de manejadores de eventos:', error);
            return false;
        }
    }
    
    static runCompleteTest() {
        console.log('üß™ Iniciando pruebas completas del sistema...');
        
        const tests = [
            this.testExportFunctionality,
            this.testEvolutionChart,
            this.testSubcontractsView,
            this.testDashboardCharts,
            this.testModalFunctionality,
            this.testChartInteractivity,
            this.testDataLoading
        ];
        
        let passedTests = 0;
        let totalTests = tests.length;
        
        tests.forEach((test) => {
            try {
                if (test()) passedTests++;
            } catch (e) {
                console.error('‚ùå Error en prueba:', e);
            }
        });
        
        console.log(`‚úÖ ${passedTests}/${totalTests} pruebas avanzadas pasaron`);
        return passedTests === totalTests;
    }
    
    static testExportFunctionality() {
        console.log('üì§ Probando funcionalidad de exportaci√≥n...');
        
        // Verificar que SheetJS est√© disponible
        if (typeof XLSX === 'undefined') {
            console.log('‚ùå SheetJS no est√° disponible');
            return false;
        }
        
        // Verificar que el m√≥dulo de exportaci√≥n est√© funcionando
        if (!window.app || !window.app.exportModule) {
            console.log('‚ùå M√≥dulo de exportaci√≥n no disponible');
            return false;
        }
        
        console.log('‚úÖ Funcionalidad de exportaci√≥n disponible');
        return true;
    }
    
    static testEvolutionChart() {
        console.log('üìà Probando gr√°fico de evoluci√≥n...');
        
        // Verificar que Chart.js est√© disponible
        if (typeof Chart === 'undefined') {
            console.log('‚ùå Chart.js no est√° disponible');
            return false;
        }
        
        // Verificar que el canvas del gr√°fico de evoluci√≥n exista
        const evolutionCanvas = document.getElementById('evolutionChart');
        if (!evolutionCanvas) {
            console.log('‚ùå Canvas del gr√°fico de evoluci√≥n no encontrado');
            return false;
        }
        
        // Verificar que la funci√≥n de actualizaci√≥n est√© disponible
        if (!window.app || !window.app.updateEvolutionView) {
            console.log('‚ùå Funci√≥n de actualizaci√≥n de evoluci√≥n no disponible');
            return false;
        }
        
        console.log('‚úÖ Gr√°fico de evoluci√≥n configurado correctamente');
        return true;
    }
    
    static testSubcontractsView() {
        console.log('üè¢ Probando vista de subcontratos...');
        
        // Verificar que los elementos del DOM existan
        const requiredElements = [
            'subcontractsGrid',
            'totalSubcontracts',
            'completedSubcontracts',
            'inProgressSubcontracts',
            'overallProgress'
        ];
        
        const missingElements = requiredElements.filter(id => !document.getElementById(id));
        if (missingElements.length > 0) {
            console.log(`‚ùå Elementos faltantes: ${missingElements.join(', ')}`);
            return false;
        }
        
        // Verificar que las funciones est√©n disponibles
        if (!window.app || !window.app.updateSubcontractView || !window.app.viewSubcontractDetails) {
            console.log('‚ùå Funciones de subcontratos no disponibles');
            return false;
        }
        
        console.log('‚úÖ Vista de subcontratos configurada correctamente');
        return true;
    }
    
    static testDashboardCharts() {
        console.log('üìä Probando gr√°ficos del dashboard...');
        
        // Verificar que los canvas de los gr√°ficos existan
        const chartCanvasIds = ['chartTotal', 'chartADC', 'chartPAC'];
        const missingCanvas = chartCanvasIds.filter(id => !document.getElementById(id));
        
        if (missingCanvas.length > 0) {
            console.log(`‚ùå Canvas faltantes: ${missingCanvas.join(', ')}`);
            return false;
        }
        
        // Verificar que las tablas de leyenda existan
        const legendTableIds = ['legendTotal', 'legendADC', 'legendPAC'];
        const missingLegends = legendTableIds.filter(id => !document.getElementById(id));
        
        if (missingLegends.length > 0) {
            console.log(`‚ùå Tablas de leyenda faltantes: ${missingLegends.join(', ')}`);
            return false;
        }
        
        // Verificar que los estilos CSS est√©n aplicados
        const chartCards = document.querySelectorAll('.chart-card');
        if (chartCards.length === 0) {
            console.log('‚ùå No se encontraron tarjetas de gr√°ficos');
            return false;
        }
        
        console.log('‚úÖ Gr√°ficos del dashboard configurados correctamente');
        return true;
    }
    
    static testModalFunctionality() {
        console.log('üîç Probando funcionalidad del modal...');
        
        // Verificar que el modal exista
        const modal = document.getElementById('questionsModal');
        if (!modal) {
            console.log('‚ùå Modal de preguntas no encontrado');
            return false;
        }
        
        // Verificar que los elementos internos del modal existan
        const modalElements = ['modalTitle', 'questionsList', 'modalOverflowNote'];
        const missingModalElements = modalElements.filter(id => !document.getElementById(id));
        
        if (missingModalElements.length > 0) {
            console.log(`‚ùå Elementos del modal faltantes: ${missingModalElements.join(', ')}`);
            return false;
        }
        
        // Verificar que la funci√≥n de mostrar modal est√© disponible
        if (!window.app || !window.app.showQuestionsInModal) {
            console.log('‚ùå Funci√≥n de mostrar modal no disponible');
            return false;
        }
        
        // Verificar que los estilos CSS del modal est√©n aplicados
        const computedStyle = window.getComputedStyle(modal);
        if (computedStyle.display === 'none' && !modal.classList.contains('show')) {
            console.log('‚úÖ Modal configurado correctamente (oculto por defecto)');
        }
        
        console.log('‚úÖ Funcionalidad del modal configurada correctamente');
        return true;
    }
    
    static testChartInteractivity() {
        console.log('üñ±Ô∏è Probando interactividad de gr√°ficos...');
        
        // Verificar que los eventos de click est√©n configurados
        const legendTables = document.querySelectorAll('.legend-wrapper table tbody tr');
        if (legendTables.length === 0) {
            console.log('‚ö†Ô∏è No hay tablas de leyenda para probar interactividad');
            return true; // No es un error, puede que no haya datos
        }
        
        // Verificar que las filas tengan el cursor pointer
        const firstRow = legendTables[0];
        const computedStyle = window.getComputedStyle(firstRow);
        if (computedStyle.cursor !== 'pointer') {
            console.log('‚ùå Las filas de leyenda no tienen cursor pointer');
            return false;
        }
        
        console.log('‚úÖ Interactividad de gr√°ficos configurada correctamente');
        return true;
    }
    
    static testDataLoading() {
        console.log('üìÇ Probando carga de datos...');
        
        // Verificar que el input de archivo exista
        const fileInput = document.getElementById('fileInput');
        if (!fileInput) {
            console.log('‚ùå Input de archivo no encontrado');
            return false;
        }
        
        // Verificar que las funciones de manejo de archivos est√©n disponibles
        if (!window.app || !window.app.handleFileUpload) {
            console.log('‚ùå Funci√≥n de manejo de archivos no disponible');
            return false;
        }
        
        console.log('‚úÖ Carga de datos configurada correctamente');
        return true;
    }
} 